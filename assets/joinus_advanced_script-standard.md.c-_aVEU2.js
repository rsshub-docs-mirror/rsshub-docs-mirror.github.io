import{_ as e,c as s,o as i,a2 as t}from"./chunks/framework.B9MTFJbE.js";const u=JSON.parse('{"title":"Script Standard","description":"","frontmatter":{"sidebar_position":2},"headers":[],"relativePath":"joinus/advanced/script-standard.md","filePath":"joinus/advanced/script-standard.md","lastUpdated":1751723006000}'),n={name:"joinus/advanced/script-standard.md"};function r(l,a,o,d,h,p){return i(),s("div",null,a[0]||(a[0]=[t(`<h1 id="script-standard" tabindex="-1">Script Standard <a class="header-anchor" href="#script-standard" aria-label="Permalink to &quot;Script Standard&quot;">​</a></h1><h2 id="code-style" tabindex="-1">Code Style <a class="header-anchor" href="#code-style" aria-label="Permalink to &quot;Code Style&quot;">​</a></h2><h3 id="general-guidelines" tabindex="-1">General Guidelines <a class="header-anchor" href="#general-guidelines" aria-label="Permalink to &quot;General Guidelines&quot;">​</a></h3><ul><li><strong>Be consistent!</strong></li><li>Avoid using deprecated features.</li><li>Avoid modifying <code>yarn.lock</code> and <code>package.json</code>, unless you add a new dependency.</li><li>Combine repetitive code into functions.</li><li>Prefer higher ECMAScript Standard features over lower ones.</li><li>Sort the entries alphabetically (uppercase first) to make it easier to find an entry.</li><li>Use HTTPS instead of HTTP whenever possible.</li><li>Use WebP format instead of JPG whenever possible since it offers better compression.</li></ul><h3 id="formatting" tabindex="-1">Formatting <a class="header-anchor" href="#formatting" aria-label="Permalink to &quot;Formatting&quot;">​</a></h3><h4 id="indentation" tabindex="-1">Indentation <a class="header-anchor" href="#indentation" aria-label="Permalink to &quot;Indentation&quot;">​</a></h4><ul><li>Use 4 spaces for indentation for consistent and easy-to-read code.</li></ul><h4 id="semicolons" tabindex="-1">Semicolons <a class="header-anchor" href="#semicolons" aria-label="Permalink to &quot;Semicolons&quot;">​</a></h4><ul><li>Add a semicolon at the end of each statement for improved readability and consistency.</li></ul><h4 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h4><ul><li>Use single quotes instead of double quotes whenever possible for consistency and readability.</li><li>Use <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="noreferrer">template literals</a> over complex string concatenation.</li><li>Use <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="noreferrer">template literals</a> for GraphQL queries as they make the code more concise and easy to read.</li></ul><h4 id="whitespace" tabindex="-1">Whitespace <a class="header-anchor" href="#whitespace" aria-label="Permalink to &quot;Whitespace&quot;">​</a></h4><ul><li>Add an empty line at the end of each file.</li><li>Avoid trailing whitespace for a clean and readable codebase.</li></ul><h3 id="language-features" tabindex="-1">Language Features <a class="header-anchor" href="#language-features" aria-label="Permalink to &quot;Language Features&quot;">​</a></h3><h4 id="casting" tabindex="-1">Casting <a class="header-anchor" href="#casting" aria-label="Permalink to &quot;Casting&quot;">​</a></h4><ul><li>Avoid re-casting the same type.</li></ul><h4 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h4><ul><li>Prefer <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noreferrer">arrow functions</a> over the <code>function</code> keyword.</li></ul><h4 id="loops" tabindex="-1">Loops <a class="header-anchor" href="#loops" aria-label="Permalink to &quot;Loops&quot;">​</a></h4><ul><li>Use <code>for-of</code> instead of <code>for</code> for arrays (<a href="https://rules.sonarsource.com/javascript/RSPEC-4138" target="_blank" rel="noreferrer">javascript:S4138</a>).</li></ul><h4 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h4><ul><li>Use <code>const</code> and <code>let</code> instead of <code>var</code>.</li><li>Declare one variable per declaration.</li></ul><h3 id="naming" tabindex="-1">Naming <a class="header-anchor" href="#naming" aria-label="Permalink to &quot;Naming&quot;">​</a></h3><ul><li>Use <code>lowerCamelCase</code> for variables and functions to adhere to standard naming conventions.</li><li>Use <code>kebab-case</code> for files and folders.</li><li>Use <code>CONSTANT_CASE</code> for constants.</li></ul><h3 id="v2-route-standard" tabindex="-1">v2 Route Standard <a class="header-anchor" href="#v2-route-standard" aria-label="Permalink to &quot;v2 Route Standard&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>The v2 Route Standard is deprecated. All new routes should follow the <a href="/joinus/new-rss/start-code">Create Route</a>.</p></div><p>When creating a new route in RSSHub, you need to organize your files in a specific way. Your namespace folder should be stored in the <code>lib/routes</code> directory and should include three mandatory files:</p><ul><li><code>router.ts</code> Registers the routes</li><li><code>maintainer.ts</code> Provides information about the route maintainer</li><li><code>radar.ts</code> Provide a <a href="https://github.com/DIYgod/RSSHub-Radar" target="_blank" rel="noreferrer">RSSHub Radar</a> rule for each route</li></ul><p>Your namespace folder structure should look like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├───lib/routes</span></span>
<span class="line"><span>│   ├───furstar</span></span>
<span class="line"><span>│       ├─── templates</span></span>
<span class="line"><span>│           ├─── description.art</span></span>
<span class="line"><span>│       ├─── router.ts</span></span>
<span class="line"><span>│       ├─── maintainer.ts</span></span>
<span class="line"><span>│       ├─── radar.ts</span></span>
<span class="line"><span>│       ├─── someOtherJs.ts</span></span>
<span class="line"><span>│   └───test</span></span>
<span class="line"><span>│   └───someOtherNamespaces</span></span>
<span class="line"><span>...</span></span></code></pre></div><p><strong>All eligible routes under the <code>lib/routes</code> path will be automatically loaded without the need for updating the <code>lib/router.ts</code>.</strong></p><h3 id="namespace" tabindex="-1">Namespace <a class="header-anchor" href="#namespace" aria-label="Permalink to &quot;Namespace&quot;">​</a></h3><p>RSSHub appends the name of all route namespace folders in front of the actual route. Route maintainers should think of the namespace as the root.</p><h4 id="naming-standard" tabindex="-1">Naming Standard <a class="header-anchor" href="#naming-standard" aria-label="Permalink to &quot;Naming Standard&quot;">​</a></h4><ul><li>Use the second-level domain (SLD) as your namespace. You can find more information about URL structure <a href="/joinus/new-radar#top-level-object-key">here</a>.</li><li>Do not create variations of the same namespace. For more information, see <a href="/joinus/new-rss/before-start#create-a-namespace">this page</a></li></ul><h3 id="registering-a-route" tabindex="-1">Registering a Route <a class="header-anchor" href="#registering-a-route" aria-label="Permalink to &quot;Registering a Route&quot;">​</a></h3><p>To register a route, the <code>router.ts</code> file should export a method that provides a Hoho route handler.</p><h3 id="maintainer-list" tabindex="-1">Maintainer List <a class="header-anchor" href="#maintainer-list" aria-label="Permalink to &quot;Maintainer List&quot;">​</a></h3><p>The <code>maintainer.ts</code> file should export an object that provides maintainer information related to the route, including:</p><ul><li>Key: Corresponding route path</li><li>Value: Array of strings, including all maintainers&#39; GitHub ID.</li></ul><p>To generate a list of maintainers, use the following command: <code>pnpm run build</code>, which will create the list under <code>assets/build/</code>.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>The path should be the same as the <code>path</code> in the corresponding documentation before the namespace appended in front of it.</p></div><h3 id="radar-rules" tabindex="-1">Radar Rules <a class="header-anchor" href="#radar-rules" aria-label="Permalink to &quot;Radar Rules&quot;">​</a></h3><p>All routes are required to include the <code>radar.ts</code> file, which includes the corresponding domain name. The minimum requirement for a successful match is for the rule to show up on the corresponding site which requires filling in the <code>title</code> and <code>docs</code> fields.</p><p>To generate a complete <code>radar-rules.ts</code> file, use the following command: <code>yarn build</code>, which will create the file under <code>assets/build/</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Remember to remove all build artifacts in <code>assets/build/</code> before committing.</p></div><h3 id="rendering-templates" tabindex="-1">Rendering Templates <a class="header-anchor" href="#rendering-templates" aria-label="Permalink to &quot;Rendering Templates&quot;">​</a></h3><p>When rendering custom content with HTML, such as <code>item.description</code>, using <a href="https://aui.github.io/art-template/" target="_blank" rel="noreferrer">art-template</a> for layout is mandatory.</p><p>All templates should be placed in the namespace&#39;s <code>templates</code> folder with the <code>.art</code> file extension.</p><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><p>Here&#39;s an example taken from the <a href="https://github.com/DIYgod/RSSHub/blob/master/lib/routes/furstar" target="_blank" rel="noreferrer">furstar</a> namespace:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ avatar }}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {{ if link !== null }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ link }}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{name}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {{ else }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{name}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {{ /if }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { art } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/render&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderAuthor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> art</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;templates/author.art&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), author);</span></span></code></pre></div><h2 id="v1-route-standard" tabindex="-1">v1 Route Standard <a class="header-anchor" href="#v1-route-standard" aria-label="Permalink to &quot;v1 Route Standard&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>The v1 Route Standard is deprecated. All new routes should follow the <a href="/joinus/new-rss/start-code">Create Route</a>.</p></div>`,55)]))}const k=e(n,[["render",r]]);export{u as __pageData,k as default};

import{_ as s,c as a,o as t,a2 as i}from"./chunks/framework.B9MTFJbE.js";const k=JSON.parse('{"title":"调试","description":"","frontmatter":{"sidebar_position":5},"headers":[],"relativePath":"zh/joinus/advanced/debug.md","filePath":"zh/joinus/advanced/debug.md","lastUpdated":1751723006000}'),o={name:"zh/joinus/advanced/debug.md"};function d(n,e,c,l,r,h){return t(),a("div",null,e[0]||(e[0]=[i(`<h1 id="调试" tabindex="-1">调试 <a class="header-anchor" href="#调试" aria-label="Permalink to &quot;调试&quot;">​</a></h1><p>当调试代码时，除了使用 <code>console.log</code> 或将 node 进程附加到调试器，您还可以使用如下方式进行调试。</p><p>注意：需要实例运行在 <code>debugInfo=true</code> 的情况下以下方式才有效</p><h2 id="使用-ctx-set-json-obj" tabindex="-1">使用 <code>ctx.set(&#39;json&#39;, obj)</code> <a class="header-anchor" href="#使用-ctx-set-json-obj" aria-label="Permalink to &quot;使用 \`ctx.set(&#39;json&#39;, obj)\`&quot;">​</a></h2><p>要将自定义对象传递给 <code>ctx.set(&#39;json&#39;, obj)</code> 进行调试，请跟随以下步骤：</p><ol><li>创建自定义对象。</li><li>将对象传递给 <code>ctx.set(&#39;json&#39;, obj)</code>。</li><li>访问相应的路由并添加查询参数 <code>format=debug.json</code> 来查看您的对象。例如，如果您想调试 <code>/furstar/characters/en</code>，您可以访问 URL：<code>/furstar/characters/en?format=debug.json</code>。</li></ol><p>以下是来自 <a href="https://github.com/DIYgod/RSSHub/blob/master/lib/routes/furstar/index.ts" target="_blank" rel="noreferrer">furstar/index.ts</a> 的使用 <code>ctx.set(&#39;json&#39;, obj)</code> 的示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchAllCharacters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.data, base);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    info,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>在上面的示例中，我们将 <code>info</code> 对象传递给 <code>ctx.set(&#39;json&#39;, obj)</code>，然后可以使用相应的路由并添加查询参数 <code>format=debug.json</code> 来访问它。</p><h2 id="debug-html" tabindex="-1">debug.html <a class="header-anchor" href="#debug-html" aria-label="Permalink to &quot;debug.html&quot;">​</a></h2><p>为了快速测试 <code>ctx.set(&#39;data&#39;, obj)</code> 中的 description 是否正确，你可以利用 <code>{index}.debug.html</code> 机制来获取相关条目的 HTML，该链接可以直接在浏览器中打开以预览渲染结果。</p><p>使用方式：访问相应的路由并添加查询参数 <code>format={index}.debug.html</code>，其中 <code>{index}</code> 为你的 <code>data.item</code> 中的项目序号（从 0 开始），即返回对应路由结果中的 <code>data.item[index].description</code> 信息。</p>`,12)]))}const b=s(o,[["render",d]]);export{k as __pageData,b as default};

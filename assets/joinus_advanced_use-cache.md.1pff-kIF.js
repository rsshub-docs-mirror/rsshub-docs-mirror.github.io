import{_ as e,c as a,o as i,a2 as t}from"./chunks/framework.B9MTFJbE.js";const o=JSON.parse('{"title":"Using Cache","description":"","frontmatter":{"sidebar_position":3},"headers":[],"relativePath":"joinus/advanced/use-cache.md","filePath":"joinus/advanced/use-cache.md","lastUpdated":1751723006000}'),h={name:"joinus/advanced/use-cache.md"};function n(l,s,r,d,p,k){return i(),a("div",null,s[0]||(s[0]=[t(`<h1 id="using-cache" tabindex="-1">Using Cache <a class="header-anchor" href="#using-cache" aria-label="Permalink to &quot;Using Cache&quot;">â€‹</a></h1><p>RSSHub have a cache module that expires after a short duration. You can change how long the cache lasts by modifying the <code>CACHE_EXPIRE</code> value in the <code>lib/config.ts</code> file using environment variables. However, for interfaces that have less frequently updated content, it&#39;s better to specify a longer cache expiration time using <code>CACHE_CONTENT_EXPIRE</code> instead.</p><p>For example, to retrieve the full text of the first comment for each issue, you can make a request to <code>\${baseUrl}/\${user}/\${repo}/issues/\${id}</code>, since this data is unavailable through <code>\${baseUrl}/\${user}/\${repo}/issues</code>. It&#39;s recommended to store this data in the cache to avoid making repeated requests to the server.</p><p>Here&#39;s an example of how you can use the cache to retrieve the data:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/cache&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tryGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.link, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> got</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.link);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                item.description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.comment-body&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span></code></pre></div><p>The above code snippet from <a href="/joinus/new-rss/start-code#better-reading-experience">Create Your Own RSSHub Route</a> shows how to use the cache to get the full text of the first comment of each issue. <code>cache.tryGet()</code> is used to determine if the data is already available within the cache. If it&#39;s not, the code retrieves the data and stores it in the cache.</p><p>The object returned from the previous statement will be reused, and an extra <code>description</code> property will be added to it. The returned cache for each <code>item.link</code> will be <code>{ title, link, pubDate, author, category, description }</code>. The next time the same path is requested, this processed cache will be used instead of making a request to the server and recomputing the data.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Any assignments to variables that are declared outside of the <code>tryGet()</code> function will not be processed under a cache-hit scenario. For example, the following code will not work as expected:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tryGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cache:key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// cache miss: &#39;2&#39;, cache hit: &#39;1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z): </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;3&#39;</span></span></code></pre></div></div><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">â€‹</a></h2><p><a href="https://github.com/DIYgod/RSSHub/tree/master/lib/utils/cache" target="_blank" rel="noreferrer">lib/middleware/cache/index.ts</a></p><h3 id="cache-tryget-key-getvaluefunc-maxage-refresh" tabindex="-1">cache.tryGet(key, getValueFunc [, maxAge [, refresh ]]) <a class="header-anchor" href="#cache-tryget-key-getvaluefunc-maxage-refresh" aria-label="Permalink to &quot;cache.tryGet(key, getValueFunc [, maxAge [, refresh ]])&quot;">â€‹</a></h3><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">â€‹</a></h4><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>key</td><td><code>string</code></td><td><em>(Required)</em> The key used to store and retrieve the cache. You can use <code>:</code> as a separator to create a hierarchy.</td></tr><tr><td>getValueFunc</td><td><code>function</code> | <code>string</code></td><td><em>(Required)</em> A function that returns data to be cached when a cache miss occurs.</td></tr><tr><td>maxAge</td><td><code>number</code></td><td><em>(Optional)</em> The maximum age of the cache in seconds. If not specified, <code>CACHE_CONTENT_EXPIRE</code> will be used.</td></tr><tr><td>refresh</td><td><code>boolean</code></td><td><em>(Optional)</em> Whether to renew the cache expiration time when the cache is hit. <code>true</code> by default.</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Below are advanced methods for using cache. You should use <code>cache.tryGet()</code> most of the time.</p><p>Note that you need to use <code>JSON.parse()</code> when retrieving the cache using <code>cache.get()</code>.</p></div><h3 id="cache-get-key-refresh" tabindex="-1">cache.get(key [, refresh ]) <a class="header-anchor" href="#cache-get-key-refresh" aria-label="Permalink to &quot;cache.get(key [, refresh ])&quot;">â€‹</a></h3><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">â€‹</a></h4><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>key</td><td><code>string</code></td><td><em>(Required)</em> The key used to retrieve the cache. You can use <code>:</code> as a separator to create a hierarchy.</td></tr><tr><td>refresh</td><td><code>boolean</code></td><td><em>(Optional)</em> Whether to renew the cache expiration time when the cache is hit. <code>true</code> by default.</td></tr></tbody></table><h3 id="cache-set-key-value-maxage" tabindex="-1">cache.set(key, value [, maxAge ]) <a class="header-anchor" href="#cache-set-key-value-maxage" aria-label="Permalink to &quot;cache.set(key, value [, maxAge ])&quot;">â€‹</a></h3><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">â€‹</a></h4><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>key</td><td><code>string</code></td><td><em>(Required)</em> The key used to store the cache. You can use <code>:</code> as a separator to create a hierarchy.</td></tr><tr><td>value</td><td><code>function</code>| <code>string</code></td><td><em>(Required)</em> The value to be cached.</td></tr><tr><td>maxAge</td><td><code>number</code></td><td><em>(Optional)</em> The maximum age of the cache in seconds. If not specified, <code>CACHE_CONTENT_EXPIRE</code> will be used.</td></tr></tbody></table>`,20)]))}const E=e(h,[["render",n]]);export{o as __pageData,E as default};

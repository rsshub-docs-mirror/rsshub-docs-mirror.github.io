import{_ as a,c as i,o as e,a2 as t}from"./chunks/framework.B9MTFJbE.js";const c=JSON.parse('{"title":"Date Handling","description":"","frontmatter":{"sidebar_position":4},"headers":[],"relativePath":"joinus/advanced/pub-date.md","filePath":"joinus/advanced/pub-date.md","lastUpdated":1751723006000}'),n={name:"joinus/advanced/pub-date.md"};function l(h,s,r,p,o,d){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="date-handling" tabindex="-1">Date Handling <a class="header-anchor" href="#date-handling" aria-label="Permalink to &quot;Date Handling&quot;">​</a></h1><p>When you visit a website, the website usually provides you with a date or timestamp. This tutorial will show you how to properly handle them in your code.</p><h2 id="the-standard" tabindex="-1">The Standard <a class="header-anchor" href="#the-standard" aria-label="Permalink to &quot;The Standard&quot;">​</a></h2><h3 id="no-date" tabindex="-1">No Date <a class="header-anchor" href="#no-date" aria-label="Permalink to &quot;No Date&quot;">​</a></h3><ul><li><strong>Do not</strong> add a date when a website does not provide one. Leave the <code>pubDate</code> field undefined.</li><li>Parse only the date and <strong>do not add a time</strong> to the <code>pubDate</code> field when a website provides a date but not an accurate time.</li></ul><p>The <code>pubDate</code> field must be a:</p><ol><li><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noreferrer">Date Object</a></li><li><strong>Not recommended. Only use for compatibility</strong>: Strings that can be parsed correctly because their behavior can be inconsistent across deployment environments. Use <code>Date.parse()</code> with caution.</li></ol><p>The <code>pubDate</code> passed from the route script should correspond to the time zone/time used by the server. For more details, see the following:</p><h2 id="use-utilities-class" tabindex="-1">Use utilities class <a class="header-anchor" href="#use-utilities-class" aria-label="Permalink to &quot;Use utilities class&quot;">​</a></h2><p>We recommend using <a href="https://github.com/iamkun/dayjs" target="_blank" rel="noreferrer">day.js</a> for date processing and time zone adjustment. There are two related utility classes:</p><h3 id="date-and-time" tabindex="-1">Date and Time <a class="header-anchor" href="#date-and-time" aria-label="Permalink to &quot;Date and Time&quot;">​</a></h3><p>The RSSHub utility class includes a wrapper for <a href="https://github.com/iamkun/dayjs" target="_blank" rel="noreferrer">day.js</a> that allows you to easily parse date strings and obtain a <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noreferrer">Date Object</a> in most cases.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { parseDate } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/parse-date&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pubDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2020/12/30&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OR</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pubDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2020/12/30&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;YYYY/MM/DD&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can refer to the <a href="https://day.js.org/docs/en/parse/string-format#list-of-all-available-parsing-tokens" target="_blank" rel="noreferrer">day.js documentation</a> for all available date formats.</p></div><p>If you need to parse a relative date, use <code>parseRelativeDate</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { parseRelativeDate } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/parse-date&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pubDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseRelativeDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2 days ago&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pubDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseRelativeDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;day before yesterday 15:36&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="timezone" tabindex="-1">Timezone <a class="header-anchor" href="#timezone" aria-label="Permalink to &quot;Timezone&quot;">​</a></h3><p>When parsing dates from websites, it&#39;s important to consider time zones. Some websites may not convert the time zone according to the visitor&#39;s location, resulting in a date that doesn&#39;t accurately reflect the user&#39;s local time. To avoid this issue, you can manually specify the time zone.</p><p>To manually specify the time zone in your code, use the following code:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timezone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/timezone&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pubDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> timezone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2020/12/30 13:00&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>The timezone function takes two parameters: the first is the original <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noreferrer">Date Object</a>, and the second is the time zone offset. The offset is specified in hours, so in this example, a time zone of UTC+1 is used.</p><p>By doing this, the time will be converted to server time and it will facilitate middleware processing.</p>`,22)]))}const g=a(n,[["render",l]]);export{c as __pageData,g as default};

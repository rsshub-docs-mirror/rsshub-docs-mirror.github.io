import{_ as l,C as n,c as h,o as p,a2 as a,j as i,a as e,G as r}from"./chunks/framework.B9MTFJbE.js";const m=JSON.parse('{"title":"部署","description":"","frontmatter":{"sidebar":"auto"},"headers":[],"relativePath":"zh/deploy/index.md","filePath":"zh/deploy/index.md","lastUpdated":1751723006000}'),k={name:"zh/deploy/index.md"},d={id:"部署到-vercel",tabindex:"-1"};function o(c,s,g,b,u,F){const t=n("Badge");return p(),h("div",null,[s[3]||(s[3]=a(`<h1 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-label="Permalink to &quot;部署&quot;">​</a></h1><p>部署 RSSHub 需要基本的计算机编程常识，如果您在部署过程中遇到无法解决的问题请到 <a href="https://github.com/DIYgod/RSSHub/issues" target="_blank" rel="noreferrer">issues</a> 寻找类似的问题或 <a href="https://github.com/DIYgod/RSSHub/issues/new/choose" target="_blank" rel="noreferrer">向我们提问</a>，我们会尽快给您答复。</p><p>部署涉及到以下基本编程常识：</p><ol><li>命令行操作</li><li><a href="https://git-scm.com/" target="_blank" rel="noreferrer">Git</a></li><li><a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a></li><li><a href="https://www.npmjs.com/get-npm" target="_blank" rel="noreferrer">npm</a> 或 <a href="https://yarnpkg.com/zh-Hans/docs/install" target="_blank" rel="noreferrer">yarn</a></li></ol><p>部署到可外网访问则可能涉及到：</p><ol><li><a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/install/" target="_blank" rel="noreferrer">Nginx</a></li><li><a href="https://www.docker.com/get-started" target="_blank" rel="noreferrer">Docker</a> 或 <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noreferrer">docker-compose</a></li><li><a href="https://redis.io/download" target="_blank" rel="noreferrer">Redis</a></li><li><a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs" target="_blank" rel="noreferrer">Heroku</a></li><li><a href="https://cloud.google.com/appengine/" target="_blank" rel="noreferrer">Google App Engine</a></li><li><a href="https://fly.io/" target="_blank" rel="noreferrer">Fly.io</a></li><li><a href="https://zeabur.com" target="_blank" rel="noreferrer">Zeabur</a></li><li><a href="https://sealos.io" target="_blank" rel="noreferrer">Sealos</a></li></ol><h2 id="docker-镜像" tabindex="-1">Docker 镜像 <a class="header-anchor" href="#docker-镜像" aria-label="Permalink to &quot;Docker 镜像&quot;">​</a></h2><p>支持两种注册表：</p><ul><li>Docker Hub: <a href="https://hub.docker.com/r/diygod/rsshub" target="_blank" rel="noreferrer"><code>diygod/rsshub</code></a></li><li>GitHub: <a href="https://github.com/DIYgod/RSSHub/pkgs/container/rsshub" target="_blank" rel="noreferrer"><code>ghcr.io/diygod/rsshub</code></a></li></ul><p>支持以下架构：</p><ul><li><p><code>linux/amd64</code></p></li><li><p><code>linux/arm64</code></p></li></ul><p><s>- <code>linux/arm/v7</code></s> （自 <code>2025-04-22</code> 起不再支持）</p><p>有以下几种 tags：</p><table tabindex="0"><thead><tr><th>Tag</th><th>描述</th><th>支持 puppeteer</th><th>举例</th></tr></thead><tbody><tr><td><code>latest</code></td><td>最新</td><td>No</td><td><code>latest</code></td></tr><tr><td><code>chromium-bundled</code></td><td>最新</td><td>Yes</td><td><code>chromium-bundled</code></td></tr><tr><td><code>{YYYY-MM-DD}</code></td><td>特定日期</td><td>No</td><td><code>2021-06-18</code></td></tr><tr><td><code>chromium-bundled-{YYYY-MM-DD}</code></td><td>特定日期</td><td>Yes</td><td><code>chromium-bundled-2021-06-18</code></td></tr><tr><td><code>{commit hash}</code></td><td>特定提交</td><td>No</td><td><code>e7c233b1df982fae10684a11c9df57892e96940a</code></td></tr></tbody></table><p>支持 puppeteer 会占用更多资源，但支持更多路由</p><h2 id="docker-compose-部署-推荐" tabindex="-1">Docker Compose 部署（推荐） <a class="header-anchor" href="#docker-compose-部署-推荐" aria-label="Permalink to &quot;Docker Compose 部署（推荐）&quot;">​</a></h2><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>下载 <a href="https://github.com/DIYgod/RSSHub/blob/master/docker-compose.yml" target="_blank" rel="noreferrer">docker-compose.yml</a></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml</span></span></code></pre></div><p>检查有无需要修改的配置</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose.yml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 也可以是你喜欢的编辑器</span></span></code></pre></div><p>启动</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><p>在浏览器中打开 <code>http://{Server IP}:1200</code>，enjoy it! ✅</p><h3 id="更新" tabindex="-1">更新 <a class="header-anchor" href="#更新" aria-label="Permalink to &quot;更新&quot;">​</a></h3><p><strong>自动更新</strong></p><p>使用 <a href="https://github.com/containrrr/watchtower" target="_blank" rel="noreferrer">watchtower</a></p><p><strong>手动更新</strong></p><p>更新镜像</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span></code></pre></div><p>重启容器</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><h3 id="添加配置" tabindex="-1">添加配置 <a class="header-anchor" href="#添加配置" aria-label="Permalink to &quot;添加配置&quot;">​</a></h3><p>修改 <a href="https://github.com/DIYgod/RSSHub/blob/master/docker-compose.yml" target="_blank" rel="noreferrer">docker-compose.yml</a> 中的 <code>environment</code> 进行配置</p><h2 id="docker-部署" tabindex="-1">Docker 部署 <a class="header-anchor" href="#docker-部署" aria-label="Permalink to &quot;Docker 部署&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>该部署方式不包括 browserless 和 redis 依赖，如有需要请改用 Docker Compose 部署方式或自行部署外部依赖</p></div><h3 id="安装-1" tabindex="-1">安装 <a class="header-anchor" href="#安装-1" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>无 puppeteer 依赖</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsshub</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1200:1200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diygod/rsshub</span></span></code></pre></div><p>有 puppeteer 依赖</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsshub</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1200:1200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diygod/rsshub:chromium-bundled</span></span></code></pre></div><p>在浏览器中打开 <code>http://{Server IP}:1200</code>，enjoy it! ✅</p><h3 id="更新-1" tabindex="-1">更新 <a class="header-anchor" href="#更新-1" aria-label="Permalink to &quot;更新&quot;">​</a></h3><p><strong>自动更新</strong></p><p>使用 <a href="https://github.com/containrrr/watchtower" target="_blank" rel="noreferrer">watchtower</a></p><p><strong>手动更新</strong></p><p>删除旧容器</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsshub</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsshub</span></span></code></pre></div><p>然后重复安装步骤</p><h3 id="添加配置-1" tabindex="-1">添加配置 <a class="header-anchor" href="#添加配置-1" aria-label="Permalink to &quot;添加配置&quot;">​</a></h3><p>配置运行在 docker 中的 RSSHub，最便利的方法是使用 docker 环境变量</p><p>以设置缓存时间为 1 小时举例，只需要在运行时增加参数：<code>-e CACHE_EXPIRE=3600</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsshub</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1200:1200</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CACHE_EXPIRE=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3600</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GITHUB_ACCESS_TOKEN=example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diygod/rsshub</span></span></code></pre></div><h2 id="手动部署" tabindex="-1">手动部署 <a class="header-anchor" href="#手动部署" aria-label="Permalink to &quot;手动部署&quot;">​</a></h2><p>部署 <code>RSSHub</code> 最直接的方式，您可以按照以下步骤将 <code>RSSHub</code> 部署在您的电脑、服务器或者其他任何地方</p><h3 id="安装-2" tabindex="-1">安装 <a class="header-anchor" href="#安装-2" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>首先是下载 <code>RSSHub</code> 的源码</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/DIYgod/RSSHub.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RSSHub</span></span></code></pre></div><p>下载完成后，需要安装依赖</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-6dGZ2" id="tab-vJ2tCoL" checked><label data-title="pnpm" for="tab-vJ2tCoL">pnpm</label><input type="radio" name="group-6dGZ2" id="tab-B0t6-EE"><label data-title="yarn" for="tab-B0t6-EE">yarn</label><input type="radio" name="group-6dGZ2" id="tab-vNZU5Tf"><label data-title="npm" for="tab-vNZU5Tf">npm</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div></div></div><h3 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-label="Permalink to &quot;编译&quot;">​</a></h3><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-agFKL" id="tab-9AuSr2n" checked><label data-title="pnpm" for="tab-9AuSr2n">pnpm</label><input type="radio" name="group-agFKL" id="tab-gIbmI2Y"><label data-title="yarn" for="tab-gIbmI2Y">yarn</label><input type="radio" name="group-agFKL" id="tab-S0rmp7x"><label data-title="npm" for="tab-S0rmp7x">npm</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div></div></div><h3 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-label="Permalink to &quot;启动&quot;">​</a></h3><p>然后在 <code>RSSHub</code> 文件夹中运行下面的命令就可以启动</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-x3zpZ" id="tab-RkxDb3P" checked><label data-title="pnpm" for="tab-RkxDb3P">pnpm</label><input type="radio" name="group-x3zpZ" id="tab-j3txDPh"><label data-title="yarn" for="tab-j3txDPh">yarn</label><input type="radio" name="group-x3zpZ" id="tab-lFZTT-8"><label data-title="npm" for="tab-lFZTT-8">npm</label><input type="radio" name="group-x3zpZ" id="tab-V8oJrG9"><label data-title="pm2" for="tab-V8oJrG9">pm2</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pm2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lib/index.ts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsshub</span></span></code></pre></div></div></div><p>在浏览器中打开 <code>http://{Server IP}:1200</code>，enjoy it! ✅</p><h3 id="添加配置-2" tabindex="-1">添加配置 <a class="header-anchor" href="#添加配置-2" aria-label="Permalink to &quot;添加配置&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 arm/arm64 上，此部署方式不包含 puppeteer 依赖。要启用 puppeteer，你需要先从发行版安装 Chromium，然后设置 <code>CHROMIUM_EXECUTABLE_PATH</code> 为其可执行路径。</p><p>Debian:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chromium</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;CHROMIUM_EXECUTABLE_PATH=chromium&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span></code></pre></div><p>Ubuntu/Raspbian:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chromium-browser</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;CHROMIUM_EXECUTABLE_PATH=chromium-browser&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span></code></pre></div></div><p>可以通过设置环境变量来配置 RSSHub</p><p>在项目根目录新建一个 <code>.env</code> 文件，每行以 <code>NAME=VALUE</code> 格式添加环境变量，例如</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CACHE_TYPE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">redis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CACHE_EXPIRE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">600</span></span></code></pre></div><p>注意它不会覆盖已有的环境变量，更多规则请参考 <a href="https://github.com/motdotla/dotenv" target="_blank" rel="noreferrer">dotenv</a></p><p>该部署方式不包括 redis 依赖，如有需要请改用 Docker Compose 部署方式或自行部署外部依赖</p><h3 id="更新-2" tabindex="-1">更新 <a class="header-anchor" href="#更新-2" aria-label="Permalink to &quot;更新&quot;">​</a></h3><p>在 <code>RSSHub</code> 文件夹中运行下面的命令就从 github 仓库拉取最新版本</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span></code></pre></div><p>然后重复安装步骤。</p><h3 id="nix-用户提示" tabindex="-1">Nix 用户提示 <a class="header-anchor" href="#nix-用户提示" aria-label="Permalink to &quot;Nix 用户提示&quot;">​</a></h3><p>通过 <code>nix-shell</code> 配置简化安装 nodejs, yarn 和 jieba：</p><div class="language-nix vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nix</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pkgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;nixpkgs&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pkgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nodejs-12_x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pkgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">stdenv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mkDerivation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;nodejs-yarn-jieba&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildInputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pkgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">yarn</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pkgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pythonPackages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">jieba</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kubernetes-helm-部署" tabindex="-1">Kubernetes(Helm) 部署 <a class="header-anchor" href="#kubernetes-helm-部署" aria-label="Permalink to &quot;Kubernetes(Helm) 部署&quot;">​</a></h2><p>RSSHub 可以使用来自 <a href="https://github.com/NaturalSelectionLabs/helm-charts/tree/main/charts/rsshub" target="_blank" rel="noreferrer">RSSHub Helm Chart</a> 的 Helm Chart 在 Kubernetes 中安装</p><p>确保满足以下要求：</p><ul><li>Kubernetes 1.16+</li><li>已经 <a href="https://helm.sh/docs/intro/install/" target="_blank" rel="noreferrer">安装</a> Helm 版本 3.9+</li></ul><h3 id="安装-3" tabindex="-1">安装 <a class="header-anchor" href="#安装-3" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>将 NaturalSelection Labs Chart 仓库添加到 Helm：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nsl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://naturalselectionlabs.github.io/helm-charts</span></span></code></pre></div><p>你可以通过运行以下命令更新 Chart 仓库：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span></code></pre></div><p>然后使用 <code>helm</code> 命令行安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-release</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nsl/rsshub</span></span></code></pre></div><h3 id="更新-3" tabindex="-1">更新 <a class="header-anchor" href="#更新-3" aria-label="Permalink to &quot;更新&quot;">​</a></h3><p>要升级 my-release RSSHub 部署：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgade</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-release</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nsl/rsshub</span></span></code></pre></div><h3 id="移除" tabindex="-1">移除 <a class="header-anchor" href="#移除" aria-label="Permalink to &quot;移除&quot;">​</a></h3><p>如要删除 my-release RSSHub 部署：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-release</span></span></code></pre></div><h3 id="使用自定义配置安装" tabindex="-1">使用自定义配置安装 <a class="header-anchor" href="#使用自定义配置安装" aria-label="Permalink to &quot;使用自定义配置安装&quot;">​</a></h3><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-XHy1M" id="tab-DHBFJXc" checked><label data-title="使用 Helm CLI" for="tab-DHBFJXc">使用 Helm CLI</label><input type="radio" name="group-XHy1M" id="tab-23PPCyu"><label data-title="使用自定义配置文件" for="tab-23PPCyu">使用自定义配置文件</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-release</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nsl/rsshub</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --set=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image.tag=2023-12-04&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --set=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;replicaCount=2&quot;</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># custom-values.yml 文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 使用 &quot;helm install my-release nsl/rsshub -f ./custom-values.yml&quot; 安装</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2023-12-04&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">replicaCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span></code></pre></div></div></div><h3 id="使用-ha-模式安装" tabindex="-1">使用 HA 模式安装 <a class="header-anchor" href="#使用-ha-模式安装" aria-label="Permalink to &quot;使用 HA 模式安装&quot;">​</a></h3><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-sKbwD" id="tab-bY6IWkS" checked><label data-title="不使用自动扩缩的 HA 模式" for="tab-bY6IWkS">不使用自动扩缩的 HA 模式</label><input type="radio" name="group-sKbwD" id="tab-H83r1WJ"><label data-title="使用自动扩缩的 HA 模式" for="tab-H83r1WJ">使用自动扩缩的 HA 模式</label></div><div class="blocks"><div class="language-yaml vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">replicaCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">puppeteer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  replicaCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">autoscaling</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  minReplicas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">puppeteer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  autoscaling</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    minReplicas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span></code></pre></div></div></div><h3 id="使用外部-redis-安装" tabindex="-1">使用外部 Redis 安装 <a class="header-anchor" href="#使用外部-redis-安装" aria-label="Permalink to &quot;使用外部 Redis 安装&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">redis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # -- 禁用内部 redis</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # -- 其他环境变量 --</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  REDIS_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">redis://external-redis:6379/</span></span></code></pre></div><p>要配置更多值，请参阅 <a href="https://github.com/NaturalSelectionLabs/helm-charts/tree/main/charts/rsshub" target="_blank" rel="noreferrer">RSSHub Helm Chart</a>。</p><h2 id="ansible-部署" tabindex="-1">Ansible 部署 <a class="header-anchor" href="#ansible-部署" aria-label="Permalink to &quot;Ansible 部署&quot;">​</a></h2><p>这个 Ansible playbook 包括了 RSSHub, Redis, browserless （依赖 Docker） 以及 Caddy 2</p><p>目前只支持 Ubuntu 20.04</p><p>需要 sudo 权限和虚拟化能力（Docker 将会被自动安装）</p><h3 id="安装-4" tabindex="-1">安装 <a class="header-anchor" href="#安装-4" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ansible</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/DIYgod/RSSHub.git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/RSSHub</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/RSSHub/scripts/ansible</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ansible-playbook</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsshub.yaml</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当提示输入 domain name 的时候，输入该主机所使用的域名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 举例：如果您的 RSSHub 用户使用 https://rsshub.example.com 访问您的 RSSHub 实例，输入 rsshub.example.com（去掉 https://）</span></span></code></pre></div><h3 id="更新-4" tabindex="-1">更新 <a class="header-anchor" href="#更新-4" aria-label="Permalink to &quot;更新&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/RSSHub/scripts/ansible</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ansible-playbook</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsshub.yaml</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当提示输入 domain name 的时候，输入该主机所使用的域名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 举例：如果您的 RSSHub 用户使用 https://rsshub.example.com 访问您的 RSSHub 实例，输入 rsshub.example.com（去掉 https://）</span></span></code></pre></div><h2 id="部署到-railway" tabindex="-1">部署到 Railway <a class="header-anchor" href="#部署到-railway" aria-label="Permalink to &quot;部署到 Railway&quot;">​</a></h2><p>包含自动更新。</p><p><a href="https://railway.app/template/QxW__f?referralCode=9wT3hc" target="_blank" rel="noreferrer"><img src="https://railway.app/button.svg" alt="Deploy on Railway"></a></p><h2 id="部署到-heroku" tabindex="-1">部署到 Heroku <a class="header-anchor" href="#部署到-heroku" aria-label="Permalink to &quot;部署到 Heroku&quot;">​</a></h2><h3 id="一键部署-无自动更新" tabindex="-1">一键部署（无自动更新） <a class="header-anchor" href="#一键部署-无自动更新" aria-label="Permalink to &quot;一键部署（无自动更新）&quot;">​</a></h3><p><a href="https://heroku.com/deploy?template=https%3A%2F%2Fgithub.com%2FDIYgod%2FRSSHub" target="_blank" rel="noreferrer"><img src="https://www.herokucdn.com/deploy/button.svg" alt="Deploy to Heroku"></a></p><h3 id="自动更新部署" tabindex="-1">自动更新部署 <a class="header-anchor" href="#自动更新部署" aria-label="Permalink to &quot;自动更新部署&quot;">​</a></h3><ol><li>将 RSSHub <a href="https://github.com/DIYgod/RSSHub/fork" target="_blank" rel="noreferrer">分叉（fork）</a> 到自己的账户下。</li><li>把自己的分叉部署到 Heroku：<code>https://heroku.com/deploy?template=URL</code>，其中 <code>URL</code> 改为分叉地址 （例如 <code>https://github.com/USERNAME/RSSHub</code>）。</li><li>检查 Heroku 设置，随代码库更新自动部署。</li><li>安装 <a href="https://github.com/apps/pull" target="_blank" rel="noreferrer">Pull</a> 应用，定期将 RSSHub 改动自动同步至你的分叉。</li></ol><h2 id="部署到-zeabur" tabindex="-1">部署到 Zeabur <a class="header-anchor" href="#部署到-zeabur" aria-label="Permalink to &quot;部署到 Zeabur&quot;">​</a></h2><ol><li>前往 <a href="https://dash.zeabur.com" target="_blank" rel="noreferrer">Zeabur 完成注册</a></li><li>创建一个新项目</li><li>在项目中选择创建新服务，选择从<strong>服务市场</strong>部署。</li><li>添加域名，若使用自定义域名，可参见 <a href="https://docs.zeabur.com/zh-CN/deploy/domain-binding" target="_blank" rel="noreferrer">Zeabur 的域名绑定文档</a>。</li></ol><p><a href="https://zeabur.com/templates/X46PTP" target="_blank" rel="noreferrer"><img src="https://zeabur.com/button.svg" alt="Deploy on Zeabur"></a></p>`,123)),i("h2",d,[s[0]||(s[0]=e("部署到 Vercel ")),r(t,{type:"danger",text:"🚧 修复中"}),s[1]||(s[1]=e()),s[2]||(s[2]=i("a",{class:"header-anchor",href:"#部署到-vercel","aria-label":'Permalink to "部署到 Vercel <Badge type="danger" text="🚧 修复中" />"'},"​",-1))]),s[4]||(s[4]=a(`<h3 id="一键部署-无自动更新-1" tabindex="-1">一键部署（无自动更新） <a class="header-anchor" href="#一键部署-无自动更新-1" aria-label="Permalink to &quot;一键部署（无自动更新）&quot;">​</a></h3><p><a href="https://vercel.com/import/project?template=https://github.com/DIYgod/RSSHub" target="_blank" rel="noreferrer"><img src="https://vercel.com/button" alt="Deploy to Vercel"></a></p><h3 id="自动更新部署-1" tabindex="-1">自动更新部署 <a class="header-anchor" href="#自动更新部署-1" aria-label="Permalink to &quot;自动更新部署&quot;">​</a></h3><ol><li>将 RSSHub <a href="https://github.com/DIYgod/RSSHub/fork" target="_blank" rel="noreferrer">分叉（fork）</a> 到自己的账户下</li><li>去 Vercel 部署一个新项目：使用 GitHub 账户登录 Vercel，进入 <a href="https://vercel.com/new/" target="_blank" rel="noreferrer">项目创建页面</a> 选择导入 RSSHub 仓库进行部署</li><li>安装 <a href="https://github.com/apps/pull" target="_blank" rel="noreferrer">Pull</a> 应用，定期将 RSSHub 改动自动同步至你的仓库</li></ol><h2 id="部署到-fly-io" tabindex="-1">部署到 Fly.io <a class="header-anchor" href="#部署到-fly-io" aria-label="Permalink to &quot;部署到 Fly.io&quot;">​</a></h2><h3 id="方案一-fork" tabindex="-1">方案一：Fork <a class="header-anchor" href="#方案一-fork" aria-label="Permalink to &quot;方案一：Fork&quot;">​</a></h3><ol><li><p>将 RSSHub <a href="https://github.com/DIYgod/RSSHub/fork" target="_blank" rel="noreferrer">Fork</a> 到自己的账户下；</p></li><li><p>下载分叉的源码</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> usernam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/RSSHub.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RSSHub</span></span></code></pre></div></li><li><p>前往 <a href="https://fly.io/app/sign-up" target="_blank" rel="noreferrer">Fly.io 完成注册</a>，并安装 <a href="https://fly.io/docs/hands-on/install-flyctl/" target="_blank" rel="noreferrer">flyctl CLI</a>；</p></li><li><p>运行 <code>fly launch</code>, 并选择一个唯一的名称和实例地区；</p></li><li><p>使用 <code>fly secrets set KEY=VALUE</code> <a href="./config#route-specific-configurations">对部分模块进行配置</a>；</p></li><li><p><a href="https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/" target="_blank" rel="noreferrer">配置通过 GitHub Actions 自动部署</a>；</p></li><li><p>（可选）利用 <code>fly certs add 你的域名</code> 来配置自定义域名，并根据指引在你的 DNS 服务商配置相关域名解析（你可在 Dashboard Certificate 页面查看域名的配置状态）。</p></li></ol><p>更新：在你 Fork 出来的仓库首页点击「Sync fork - Update Branch」来手动更新至官方最新的 master 分支，或安装 <a href="https://github.com/apps/pull" target="_blank" rel="noreferrer">Pull</a> 应用来定期自动同步。</p><h3 id="方案二-自行维护-fly-toml" tabindex="-1">方案二：自行维护 fly.toml <a class="header-anchor" href="#方案二-自行维护-fly-toml" aria-label="Permalink to &quot;方案二：自行维护 fly.toml&quot;">​</a></h3><ol><li><p>前往 <a href="https://fly.io/app/sign-up" target="_blank" rel="noreferrer">Fly.io 完成注册</a>，并安装 <a href="https://fly.io/docs/hands-on/install-flyctl/" target="_blank" rel="noreferrer">flyctl CLI</a>；</p></li><li><p>自行在本地新建一个空目录，在其中运行 <code>fly launch</code>, 并选择一个唯一的名称和实例地区；</p></li><li><p>编辑生成的 fly.toml 文件，新增</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;diygod/rsshub:latest&quot;</span></span></code></pre></div><p>根据实际情况，你可能希望使用其他镜像标签，请阅读 <a href="#docker-jing-xiang">Docker 镜像</a> 的有关内容；</p></li><li><p>修改 fly.toml 中的 <code>[env]</code> 段或使用<code>fly secrets set KEY=VALUE</code> <a href="./config#route-specific-configurations">对部分模块进行配置</a>；</p></li><li><p>执行 <code>fly deploy</code> 启动应用；</p></li><li><p>（可选）利用 <code>fly certs add 你的域名</code> 来配置自定义域名，并根据指引在你的 DNS 服务商配置相关域名解析（你可在 Dashboard Certificate 页面查看域名的配置状态）。</p></li></ol><p>更新：进入你存储了 <code>fly.toml</code> 文件的目录，执行 <code>fly deploy</code> 即可触发拉取最新镜像、启动应用的步骤。</p><h3 id="配置内置的-upstash-redis-缓存" tabindex="-1">配置内置的 Upstash Redis 缓存 <a class="header-anchor" href="#配置内置的-upstash-redis-缓存" aria-label="Permalink to &quot;配置内置的 Upstash Redis 缓存&quot;">​</a></h3><p>在 <code>RSSHub</code> 文件夹下运行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fly</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span></span></code></pre></div><p>来创建一个新的 Redis 数据库，地域选择与你上面创建 RSSHub app 时相同的地域，建议选择开启 <a href="https://redis.io/docs/reference/eviction/" target="_blank" rel="noreferrer">eviction</a>。创建完成后会输出类似于 <code>redis://default:&lt;password&gt;@&lt;domain&gt;.upstash.io</code> 的字符串。</p><p>因目前 <a href="https://github.com/luin/ioredis/issues/1576" target="_blank" rel="noreferrer">上游依赖的一个 bug</a>，你暂时需要在 Fly.io 给你的连接 URL 后追加 <code>family=6</code> 的参数，即使用 <code>redis://default:&lt;password&gt;@&lt;domain&gt;.upstash.io/?family=6</code> 作为连接 URL。</p><p>再配置 fly.toml 中的 <code>[env]</code> 段或运行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fly</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secrets</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CACHE_TYPE=redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> REDIS_URL=&#39;&lt;刚才的连接 URL&gt;&#39;</span></span></code></pre></div><p>并执行 <code>fly deploy</code> 触发重新部署来完成配置。</p><h2 id="部署到-sealos" tabindex="-1">部署到 Sealos <a class="header-anchor" href="#部署到-sealos" aria-label="Permalink to &quot;部署到 Sealos&quot;">​</a></h2><p>包含自动更新</p><p><a href="https://template.cloud.sealos.io/deploy?templateName=rsshub" target="_blank" rel="noreferrer"><img src="https://raw.githubusercontent.com/labring-actions/templates/main/Deploy-on-Sealos.svg" alt="Deploy to Sealos"></a></p><h2 id="部署到-pikapods" tabindex="-1">部署到 PikaPods <a class="header-anchor" href="#部署到-pikapods" aria-label="Permalink to &quot;部署到 PikaPods&quot;">​</a></h2><p>每月只需 1 美元即可运行 RSSHub。包括自动更新和 5 美元的免费起始额度。</p><p><a href="https://www.pikapods.com/pods?run=rsshub" target="_blank" rel="noreferrer"><img src="https://www.pikapods.com/static/run-button.svg" alt="Run on PikaPods"></a></p><h2 id="部署到-google-app-engine" tabindex="-1">部署到 Google App Engine <a class="header-anchor" href="#部署到-google-app-engine" aria-label="Permalink to &quot;部署到 Google App Engine&quot;">​</a></h2><h3 id="准备" tabindex="-1">准备 <a class="header-anchor" href="#准备" aria-label="Permalink to &quot;准备&quot;">​</a></h3><p><a href="https://cloud.google.com/appengine/docs/flexible/nodejs/quickstart" target="_blank" rel="noreferrer">Before you begin</a></p><p>按照这里的引导完成 GCP 账号设置，创建 GCP 项目，创建 App Engine 项目，开通付费功能（必须），安装 git 与 gcloud 工具。并完成 gcloud 工具的初始化，初始化具体方式 <a href="https://cloud.google.com/sdk/gcloud/?hl=zh-CN" target="_blank" rel="noreferrer">请查看这个链接</a>。如果你不打算在本地调试本项目，可以不安装 Node.js 环境。</p><p>请注意，GAE 免费用量不支持 Flexible Environment，部署到 Flexible Environment 前请确认收费标准。</p><p>Node.JS 的 standard environment 仍在测试中，您可能会在部署或使用中遇到某些不可预期的问题。</p><p>运行 <code>git clone https://github.com/DIYgod/RSSHub.git</code> 拉取本项目的最新版本。</p><h3 id="app-yaml-配置" tabindex="-1">app.yaml 配置 <a class="header-anchor" href="#app-yaml-配置" aria-label="Permalink to &quot;app.yaml 配置&quot;">​</a></h3><h4 id="部署到-flexible-environment" tabindex="-1">部署到 Flexible Environment <a class="header-anchor" href="#部署到-flexible-environment" aria-label="Permalink to &quot;部署到 Flexible Environment&quot;">​</a></h4><p>在 RSSHub 项目根目录下建立一个 app.yaml 文件，内容示例如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [START app_yaml]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">runtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">custom</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">flex</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This sample incurs costs to run on the App Engine flexible environment.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The settings below are to reduce costs during testing and are not appropriate</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># for production use. For more information, see:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># https://cloud.google.com/appengine/docs/flexible/nodejs/configuring-your-app-with-app-yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">manual_scaling</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    instances</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 以下是 app engine 资源配置，可以自行修改，硬盘最低为 10G</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    memory_gb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    disk_size_gb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">network</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    forwarded_ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">80:1200</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">443:1200</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 以下是环境配置示例，具体可配置项见本文档配置章节</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">env_variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    CACHE_EXPIRE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;300&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [END app_yaml]</span></span></code></pre></div><h4 id="部署到-standard-environment" tabindex="-1">部署到 standard environment <a class="header-anchor" href="#部署到-standard-environment" aria-label="Permalink to &quot;部署到 standard environment&quot;">​</a></h4><p>在 RSSHub 项目根目录下建立一个 app.yaml 文件，内容示例如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [START app_yaml]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">runtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nodejs8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">network</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    forwarded_ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">80:1200</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">443:1200</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 以下是环境配置示例，具体可配置项见本文档配置章节</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">env_variables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    CACHE_EXPIRE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;300&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [END app_yaml]</span></span></code></pre></div><h3 id="安装-5" tabindex="-1">安装 <a class="header-anchor" href="#安装-5" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>在 RSSHub 项目根目录下运行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcloud</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span></span></code></pre></div><p>进行项目部署，如果您需要变更 app.yaml 文件名称或者变更部署的项目 ID 或者指定版本号等，请参考 <a href="https://cloud.google.com/appengine/docs/flexible/nodejs/testing-and-deploying-your-app#deploying_a_service_2" target="_blank" rel="noreferrer">Deploying a service</a>。</p><p>部署完成后可访问您的 Google App Engine URL 查看部署情况。</p><h2 id="play-with-docker" tabindex="-1">Play with Docker <a class="header-anchor" href="#play-with-docker" aria-label="Permalink to &quot;Play with Docker&quot;">​</a></h2><p>如果想要测试因为反爬规则导致无法访问的路由，您可以点击下方按钮拉起一套免费，临时，专属于您的 RSSHub</p><p><a href="https://labs.play-with-docker.com/?stack=https://raw.githubusercontent.com/DIYgod/RSSHub/master/docker-compose.yml" target="_blank" rel="noreferrer"><img src="https://raw.githubusercontent.com/play-with-docker/stacks/master/assets/images/button.png" alt="Try in PWD"></a></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>需要 <a href="https://hub.docker.com" target="_blank" rel="noreferrer">DockerHub</a> 账号</li><li><a href="https://labs.play-with-docker.com/" target="_blank" rel="noreferrer">Play with Docker</a> 一次仅能使用 4 小时，不能作为持久化解决方案，应当用于测试 / 验证路由规则</li><li>如果部署完成后不能看到自动识别的端口，请手动点击顶部按钮<code>open port</code>并输入<code>1200</code></li><li>有的时候 PWD 会抽风，如果遇到点击<code>Start</code>后空白页面，或者拉起失败，请重试</li></ul></div>`,48))])}const E=l(k,[["render",o]]);export{m as __pageData,E as default};

import{_ as i,c as s,o as e,a2 as t}from"./chunks/framework.B9MTFJbE.js";const k=JSON.parse('{"title":"路由规范","description":"","frontmatter":{"sidebar_position":2},"headers":[],"relativePath":"zh/joinus/advanced/script-standard.md","filePath":"zh/joinus/advanced/script-standard.md","lastUpdated":1751723006000}'),l={name:"zh/joinus/advanced/script-standard.md"};function r(n,a,h,o,d,p){return e(),s("div",null,a[0]||(a[0]=[t(`<h1 id="路由规范" tabindex="-1">路由规范 <a class="header-anchor" href="#路由规范" aria-label="Permalink to &quot;路由规范&quot;">​</a></h1><h2 id="代码规范" tabindex="-1">代码规范 <a class="header-anchor" href="#代码规范" aria-label="Permalink to &quot;代码规范&quot;">​</a></h2><h3 id="通用准则" tabindex="-1">通用准则 <a class="header-anchor" href="#通用准则" aria-label="Permalink to &quot;通用准则&quot;">​</a></h3><ul><li><strong>保持一致！</strong></li><li>避免使用已经被废弃的特性。</li><li>避免修改 <code>yarn.lock</code> 和 <code>package.json</code>，除非您添加了新的依赖。</li><li>将重复的代码合并为函数。</li><li>优先使用更高版本的 ECMAScript 标准特性，而不是使用低版本特性。</li><li>按字母顺序排序（大写字母优先），以便更容易找到条目。</li><li>尽量使用 HTTPS 而非 HTTP 传输数据。</li><li>尽量使用 WebP 格式而非 JPG 格式，因为前者支持更好的压缩。</li></ul><h3 id="代码格式" tabindex="-1">代码格式 <a class="header-anchor" href="#代码格式" aria-label="Permalink to &quot;代码格式&quot;">​</a></h3><h4 id="缩进" tabindex="-1">缩进 <a class="header-anchor" href="#缩进" aria-label="Permalink to &quot;缩进&quot;">​</a></h4><ul><li>使用 4 个空格缩进。</li></ul><h4 id="分号" tabindex="-1">分号 <a class="header-anchor" href="#分号" aria-label="Permalink to &quot;分号&quot;">​</a></h4><ul><li>在每条语句结尾添加分号。</li></ul><h4 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h4><ul><li>使用单引号而不是双引号。</li><li>使用 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="noreferrer">模板字符串</a> 而非复杂的字符串拼接。</li><li>对于 GraphQL 查询，使用 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="noreferrer">模板字符串</a>。</li></ul><h4 id="空格" tabindex="-1">空格 <a class="header-anchor" href="#空格" aria-label="Permalink to &quot;空格&quot;">​</a></h4><ul><li>在每个文件末尾添加一个空行。</li><li>避免尾随空格，代码应整洁易读。</li></ul><h3 id="语言特性" tabindex="-1">语言特性 <a class="header-anchor" href="#语言特性" aria-label="Permalink to &quot;语言特性&quot;">​</a></h3><h4 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h4><ul><li>避免重复转换同一类型。</li></ul><h4 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h4><ul><li>优先使用 <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noreferrer">箭头函数</a>，而不是使用 <code>function</code> 关键字定义函数。</li></ul><h4 id="循环" tabindex="-1">循环 <a class="header-anchor" href="#循环" aria-label="Permalink to &quot;循环&quot;">​</a></h4><ul><li>对于数组，使用 <code>for-of</code>，而不是使用 <code>for</code>。(<a href="https://rules.sonarsource.com/javascript/RSPEC-4138" target="_blank" rel="noreferrer">javascript:S4138</a>)</li></ul><h4 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h4><ul><li>使用 <code>const</code> 和 <code>let</code> 而不是 <code>var</code>。</li><li>每次声明一个变量。</li></ul><h3 id="命名" tabindex="-1">命名 <a class="header-anchor" href="#命名" aria-label="Permalink to &quot;命名&quot;">​</a></h3><ul><li>使用 <code>lowerCamelCase</code> 命名变量和函数</li><li>使用 <code>kebab-case</code> 命名文件和文件夹。</li><li>使用 <code>CONSTANT_CASE</code> 命名常量。</li></ul><h2 id="v2-路由规范" tabindex="-1">v2 路由规范 <a class="header-anchor" href="#v2-路由规范" aria-label="Permalink to &quot;v2 路由规范&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>v2 路由规范已被弃用。所有新路由都应遵循<a href="/joinus/new-rss/start-code">制作路由</a></p></div><p>当在 RSSHub 中编写新的路由时，需要按特定方式组织文件。命名空间文件夹应该存储在 <code>lib/routes</code> 目录下，并且应包括三个必需文件：</p><ul><li><code>router.ts</code> 注册路由</li><li><code>maintainer.ts</code> 提供路由维护者信息</li><li><code>radar.ts</code> 为每个路由提供对应 <a href="https://github.com/DIYgod/RSSHub-Radar" target="_blank" rel="noreferrer">RSSHub Radar</a> 规则</li></ul><p>命名空间文件夹结构应该像这样：</p><pre><code>├───lib/routes
│   ├───furstar
│       ├─── templates
│           ├─── description.art
│       ├─── router.ts
│       ├─── maintainer.ts
│       ├─── radar.ts
│       ├─── someOtherJs.ts
│   └───test
│   └───someOtherNamespaces
...
</code></pre><p><strong>所有符合条件的，在 <code>lib/routes</code> 路径下的路由将会被自动载入，无需更新 <code>lib/router.ts</code></strong></p><h3 id="命名空间" tabindex="-1">命名空间 <a class="header-anchor" href="#命名空间" aria-label="Permalink to &quot;命名空间&quot;">​</a></h3><p>RSSHub 会将所有路由命名空间的文件夹名附加到路由前面。路由维护者可命名空间视为根目录。</p><h4 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h4><ul><li>使用二级域名 (second-level domain, SLD) 作为命名空间。有关 URL 结构的更多信息，请参阅 <a href="/zh/joinus/new-radar#顶层对象键">此页面</a>。</li><li>不要创建相同命名空间的变体。有关更多信息，请参阅 <a href="/zh/joinus/new-rss/before-start#创建命名空间">此页面</a></li></ul><h3 id="注册路由" tabindex="-1">注册路由 <a class="header-anchor" href="#注册路由" aria-label="Permalink to &quot;注册路由&quot;">​</a></h3><p><code>router.ts</code> 文件应导出一个方法，提供一个 Hoho route handler。</p><h3 id="维护者列表" tabindex="-1">维护者列表 <a class="header-anchor" href="#维护者列表" aria-label="Permalink to &quot;维护者列表&quot;">​</a></h3><p><code>maintainer.ts</code> 文件应导出一个对象，提供与路由相关的维护者信息，包括：</p><ul><li>键: 对应的路由</li><li>值：一个字符串数组，包括所有维护者的 GitHub ID。</li></ul><p>要生成维护者列表，可使用以下命令：<code>pnpm run build</code>，它将在 <code>assets/build/</code> 目录下一份维护者列表。</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>路由应该与相应的文档中添加命名空间前的 <code>path</code> 一致。</p></div><h3 id="radar-规则" tabindex="-1">Radar 规则 <a class="header-anchor" href="#radar-规则" aria-label="Permalink to &quot;Radar 规则&quot;">​</a></h3><p>所有路由都需要包含 <code>radar.ts</code> 文件，其中包括相应的域名。最低要求是规则出现在相应的站点上，即需要填写 <code>title</code> 和 <code>docs</code> 字段。</p><p>要生成完整的 <code>radar-rules.js</code> 文件，可使用以下命令：<code>yarn build</code>，它将在 <code>assets/build/</code> 目录下创建文件。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在提交代码之前，请记得删除所有在 <code>assets/build/</code> 中的生成的资源。</p></div><h3 id="渲染模板" tabindex="-1">渲染模板 <a class="header-anchor" href="#渲染模板" aria-label="Permalink to &quot;渲染模板&quot;">​</a></h3><p>当渲染自定义 HTML 内容（例如 <code>item.description</code>）时，<strong>必须</strong>使用 <a href="https://aui.github.io/art-template/" target="_blank" rel="noreferrer">art-template</a> 进行排版。</p><p>所有模板都应放置在路由命名空间下的 <code>templates</code> 文件夹中，并使用 <code>.art</code> 文件扩展名命名。</p><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>下面是在 <a href="https://github.com/DIYgod/RSSHub/blob/master/lib/routes/furstar" target="_blank" rel="noreferrer">furstar</a> 命名空间中示例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ avatar }}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {{ if link !== null }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ link }}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{name}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {{ else }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{name}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {{ /if }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { art } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/render&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderAuthor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> art</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;templates/author.art&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), author);</span></span></code></pre></div><h2 id="v1-路由规范" tabindex="-1">v1 路由规范 <a class="header-anchor" href="#v1-路由规范" aria-label="Permalink to &quot;v1 路由规范&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>v1 路由规范已被弃用。所有新路由都应遵循<a href="/joinus/new-rss/start-code">制作路由</a></p></div>`,55)]))}const u=i(l,[["render",r]]);export{k as __pageData,u as default};

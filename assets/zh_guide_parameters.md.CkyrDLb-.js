import{_ as a,c as t,o as r,a2 as o}from"./chunks/framework.B9MTFJbE.js";const n=JSON.parse('{"title":"通用参数","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/parameters.md","filePath":"zh/guide/parameters.md","lastUpdated":1751723006000}'),l={name:"zh/guide/parameters.md"};function i(s,e,p,c,d,h){return r(),t("div",null,e[0]||(e[0]=[o('<h1 id="通用参数" tabindex="-1">通用参数 <a class="header-anchor" href="#通用参数" aria-label="Permalink to &quot;通用参数&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>通用参数实际上是 URI 中的 query，可以使用 <code>&amp;</code> 连接组合使用，效果叠加。</p><p>通用参数需要置于路由路径的最后。有些路由在路由路径（route path）的最后引入了<span style="color:blue;"><strong>自定义参数</strong></span>，<span style="color:violet;"><strong>通用参数</strong></span>也需要置于它们之后。</p><p>举例: <a href="https://rsshub.app/twitter/user/durov/readable=1&amp;includeRts=0?brief=100&amp;limit=5"><a href="https://rsshub.app/twitter/user/durov/" target="_blank" rel="noreferrer">https://rsshub.app/twitter/user/durov/</a><span style="color:blue;"><strong>readable=1&amp;includeRts=0</strong></span>?<span style="color:violet;"><strong>brief=100&amp;limit=5</strong></span></a></p></div><h2 id="内容过滤" tabindex="-1">内容过滤 <a class="header-anchor" href="#内容过滤" aria-label="Permalink to &quot;内容过滤&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>请务必显式进行<a href="https://gchq.github.io/CyberChef/#recipe=URL_Encode(true)" target="_blank" rel="noreferrer">彻底的 URL 编码</a>。切勿依赖浏览器的自动 URL 编码，某些字符，如 <code>+</code>, <code>&amp;</code>，将不会被自动编码，进而导致最终解析结果不正确。</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>filter 支持正则表达式。由于正则部分特性可被利用于 DoS (ReDOS)，默认引擎<code>re2</code>屏蔽了部分<code>Regexp</code>功能，且在部分情况下表现不一致。具体差异可以<a href="https://github.com/uhop/node-re2#limitations-things-re2-does-not-support" target="_blank" rel="noreferrer">查看文档</a></p><p>如果需要指定不同的引擎，请参考<a href="/zh/deploy/config#功能特性">功能特性 -&gt; FILTER_REGEX_ENGINE</a>。</p></div><p>可以使用以下 URL query 过滤内容，支持通过正则表达式过滤</p><p><code>filter</code> 选出想要的内容</p><ul><li><p><code>filter</code>: 过滤标题和描述</p></li><li><p><code>filter_title</code>: 过滤标题</p></li><li><p><code>filter_description</code>: 过滤描述</p></li><li><p><code>filter_author</code>: 过滤作者</p></li><li><p><code>filter_category</code>: 过滤分类</p></li><li><p><code>filter_time</code>: 过滤时间，仅支持数字，单位为秒。返回指定时间范围内的内容。如果条目没有输出<code>pubDate</code>或者格式不正确将不会被过滤</p></li></ul><p>举例 1: <code>https://rsshub.app/bilibili/fav/2267573/801952073?filter=编曲|摄影</code> 举例 2: <code>https://rsshub.app/nga/forum/489?filter_time=600</code></p><p><code>filterout</code> 去掉不要的内容</p><ul><li><p><code>filterout</code>: 过滤标题和描述</p></li><li><p><code>filterout_title</code>: 过滤标题</p></li><li><p><code>filterout_description</code>: 过滤描述</p></li><li><p><code>filterout_author</code>: 过滤作者</p></li><li><p><code>filterout_category</code>: 过滤分类</p></li></ul><p>举例: <code>https://rsshub.app/bilibili/fav/2267573/801952073?filterout=编曲|摄影</code></p><p><code>filter_case_sensitive</code> 过滤是否区分大小写，<code>filter</code> 和 <code>filterout</code>同时适用</p><p>默认为 <code>true</code>，区分大小写</p><p>举例 1: <a href="https://rsshub.app/bilibili/user/coin/2267573?filter=diyGOD%7CRSShub&amp;filter_case_sensitive=false" target="_blank" rel="noreferrer">https://rsshub.app/bilibili/user/coin/2267573?filter=diyGOD|RSShub&amp;filter_case_sensitive=false</a></p><h2 id="条数限制" tabindex="-1">条数限制 <a class="header-anchor" href="#条数限制" aria-label="Permalink to &quot;条数限制&quot;">​</a></h2><p>可以使用 <code>limit</code> 参数限制最大条数，主要用于排行榜类 RSS</p><p>举例: bilibili 排行榜前 10 <a href="https://rsshub.app/bilibili/ranking/0/3?limit=10" target="_blank" rel="noreferrer">https://rsshub.app/bilibili/ranking/0/3?limit=10</a></p><h2 id="排序结果" tabindex="-1">排序结果 <a class="header-anchor" href="#排序结果" aria-label="Permalink to &quot;排序结果&quot;">​</a></h2><p>通过 <code>sorted</code> 参数控制是否对输出的条目按照发布时间进行排序，这对一些会把部分新闻等置顶的源比较有用（如信息发布网）。默认为 <code>true</code> 即进行排序。</p><p>举例：不重新排序南京大学本科生院教学信息网的公告通知：<a href="https://rsshub.app/nju/jw/ggtz?sorted=false" target="_blank" rel="noreferrer">https://rsshub.app/nju/jw/ggtz?sorted=false</a></p><h2 id="全文输出" tabindex="-1">全文输出 <a class="header-anchor" href="#全文输出" aria-label="Permalink to &quot;全文输出&quot;">​</a></h2><p>可以使用 <code>mode</code> 参数来开启自动提取全文内容功能</p><p>举例: bilibili 专栏全文输出 <a href="https://rsshub.app/bilibili/user/article/334958638?mode=fulltext" target="_blank" rel="noreferrer">https://rsshub.app/bilibili/user/article/334958638?mode=fulltext</a></p><h2 id="访问控制" tabindex="-1">访问控制 <a class="header-anchor" href="#访问控制" aria-label="Permalink to &quot;访问控制&quot;">​</a></h2><p>可以使用 <code>code</code> 或 <code>key</code> 进行访问控制。参考<a href="/zh/deploy/config#访问控制配置">访问控制配置</a>。</p><h2 id="输出-telegram-即时预览链接" tabindex="-1">输出 Telegram 即时预览链接 <a class="header-anchor" href="#输出-telegram-即时预览链接" aria-label="Permalink to &quot;输出 Telegram 即时预览链接&quot;">​</a></h2><p>可以输出 Telegram 可识别的即时预览链接，主要用于文章类 RSS</p><p>Telegram 即时预览模式需要在官网制作页面处理模板，请前往<a href="https://instantview.telegram.org/" target="_blank" rel="noreferrer">官网</a>了解更多</p><ul><li><code>tgiv</code>: 模板 hash，可从模板制作页面分享出来的链接末尾获取（<code>&amp;rhash=</code>后面跟着的字符串）</li></ul><p>举例: <a href="https://rsshub.app/novel/biquge/94_94525?tgiv=bd3c42818a7f7e" target="_blank" rel="noreferrer">https://rsshub.app/novel/biquge/94_94525?tgiv=bd3c42818a7f7e</a></p><h2 id="输出-sci-hub-链接" tabindex="-1">输出 Sci-hub 链接 <a class="header-anchor" href="#输出-sci-hub-链接" aria-label="Permalink to &quot;输出 Sci-hub 链接&quot;">​</a></h2><p>可以输出 Sci-hub 链接，用于知名期刊或输出 DOI 的科学期刊类 RSS。</p><ul><li><code>scihub</code>: 任意值开启</li></ul><p>举例: <a href="https://rsshub.app/pnas/latest?scihub=1" target="_blank" rel="noreferrer">https://rsshub.app/pnas/latest?scihub=1</a></p><h2 id="中文简繁体转换" tabindex="-1">中文简繁体转换 <a class="header-anchor" href="#中文简繁体转换" aria-label="Permalink to &quot;中文简繁体转换&quot;">​</a></h2><ul><li><code>opencc</code>: <code>s2t</code> 简体转繁体、<code>t2s</code> 繁体转简体，其它可选值见 <a href="https://github.com/fengkx/simplecc-wasm#%E9%85%8D%E7%BD%AE-configurations" target="_blank" rel="noreferrer">simple-wasm - Configurations</a></li></ul><p>举例: <a href="https://rsshub.app/dcard/posts/popular?opencc=t2s" target="_blank" rel="noreferrer">https://rsshub.app/dcard/posts/popular?opencc=t2s</a></p><h2 id="多媒体处理" tabindex="-1">多媒体处理 <a class="header-anchor" href="#多媒体处理" aria-label="Permalink to &quot;多媒体处理&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>这是个测试中的 API</p><p><code>image_hotlink_template</code> 和 <code>multimedia_hotlink_template</code> 允许用户提供链接模版用于替换媒体 URL。特定的路由和阅读器组合可能导致用户需要这些功能，但不是非常普遍。敏感字符将被自动转义，不会发生 XSS 攻击。替换范围仅限于媒体元素，即使注入脚本 URL 也不会被加载而造成 XSS。用户能且仅能控制的是「媒体从哪里来」。该功能通常不会带来副作用，如果需要开启这两个参数，请将 <code>ALLOW_USER_HOTLINK_TEMPLATE</code> 环境变量设置为 <code>true</code></p></div><ul><li><code>image_hotlink_template</code>: 用于处理描述中图片的 URL，绕过防盗链等限制，留空不生效。用法参考 <a href="https://github.com/DIYgod/RSSHub/issues/2769" target="_blank" rel="noreferrer">#2769</a>。可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL#Properties" target="_blank" rel="noreferrer">URL</a> 的所有属性（加上后缀 <code>_ue</code> 则会对其进行 URL 编码），格式为 JS 变量模板。例子：<code>${protocol}//${host}${pathname}</code>, <code>https://i3.wp.com/${host}${pathname}</code>, <code>https://images.weserv.nl?url=${href_ue}</code></li><li><code>multimedia_hotlink_template</code>: 用法同 <code>image_hotlink_template</code>，但应用于音频和视频。注意：该服务必须跟随跳转、允许反代音频和视频，且必须在反代时丢弃 <code>Referer</code> 请求头。<a href="https://github.com/Rongronggg9/rsstt-img-relay/blob/main/README_zh-CN.md" target="_blank" rel="noreferrer">这里有一个符合要求的易于自行搭建的项目</a>，该项目接受直接拼接 URL，即 <code>https://example.com/${href}</code>，其中 <code>example.com</code> 应替换为自行搭建的服务的域名</li><li><code>wrap_multimedia_in_iframe</code>: 将音频和视频包裹在 <code>&lt;iframe&gt;</code> 中，以阻止阅读器发送 <code>Referer</code> 请求头。支持该变通解决方案的阅读器较少，且可能造成显示错误。有些阅读器，如 RSS Guard、Akregator，可能不支持前一种方法，则可尝试此方法。设置为 <code>1</code> 生效</li></ul><p><a href="/zh/guide/faq">FAQ</a> 中有更多信息。</p><h2 id="输出格式" tabindex="-1">输出格式 <a class="header-anchor" href="#输出格式" aria-label="Permalink to &quot;输出格式&quot;">​</a></h2><p>RSSHub 同时支持 RSS 2.0、Atom、JSON Feed 和 RSS3 输出格式，在路由添加 <code>format</code> 参数（值为<code>rss</code>、<code>atom</code>、<code>json</code> 或 <code>rss3</code>）即可请求对应输出格式，缺省为 RSS 2.0</p><p>举例:</p><ul><li>缺省 RSS 2.0 - <a href="https://rsshub.app/jianshu/home" target="_blank" rel="noreferrer">https://rsshub.app/jianshu/home</a></li><li>RSS 2.0 - <a href="https://rsshub.app/jianshu/home?format=rss" target="_blank" rel="noreferrer">https://rsshub.app/jianshu/home?format=rss</a></li><li>Atom - <a href="https://rsshub.app/jianshu/home?format=atom" target="_blank" rel="noreferrer">https://rsshub.app/jianshu/home?format=atom</a></li><li>JSON Feed - <a href="https://rsshub.app/twitter/user/DIYgod?format=json" target="_blank" rel="noreferrer">https://rsshub.app/twitter/user/DIYgod?format=json</a></li><li>RSS3 - <a href="https://rsshub.app/abc?format=rss3" target="_blank" rel="noreferrer">https://rsshub.app/abc?format=rss3</a></li><li>和 filter 或其他 URL query 一起使用 - <code>https://rsshub.app/bilibili/user/coin/2267573?format=atom&amp;filter=微小微|赤九玖|暴走大事件</code></li></ul><h3 id="debug-json" tabindex="-1">debug.json <a class="header-anchor" href="#debug-json" aria-label="Permalink to &quot;debug.json&quot;">​</a></h3><p>在路由添加 <code>debug.json</code> 格式参数且实例运行在 <code>debugInfo=true</code> 的情况下，RSShub 将会返回插件设置在 <code>ctx.set(&#39;json&#39;, obj)</code> 的内容</p><p>这功能皆在方便开发者调试问题，方便用户自行开发需要的功能。插件作者可以酌情考虑使用，没有格式要求。</p><p>举例：</p><ul><li><code>/furstar/characters/cn?format=debug.json</code></li></ul><h3 id="debug-html" tabindex="-1">debug.html <a class="header-anchor" href="#debug-html" aria-label="Permalink to &quot;debug.html&quot;">​</a></h3><p>在路由添加 <code>{index}.debug.html</code> 格式参数（<code>{index}</code> 为数字，为从 0 开始的下标）且实例运行在 <code>debugInfo=true</code> 的情况下，RSShub 将会返回插件设置在 <code>data.item[index].description</code> 的内容，你可用浏览器访问该页面来快速查看提取的信息的展示结果。</p><p>举例：</p><ul><li><code>/furstar/characters/cn?format=0.debug.html</code></li></ul><h2 id="输出简讯" tabindex="-1">输出简讯 <a class="header-anchor" href="#输出简讯" aria-label="Permalink to &quot;输出简讯&quot;">​</a></h2><p>可以使用 <code>brief</code> 参数输出特定字数 ( ≥ <code>100</code> 字 ) 的纯文本内容</p><p>举例：</p><ul><li>输出 100 字简讯: <code>?brief=100</code></li></ul><h2 id="输出-gpt-总结的内容-仅自建" tabindex="-1">输出 GPT 总结的内容（仅自建） <a class="header-anchor" href="#输出-gpt-总结的内容-仅自建" aria-label="Permalink to &quot;输出 GPT 总结的内容（仅自建）&quot;">​</a></h2><p>可以使用 <code>chatgpt</code> 参数输出 GPT 总结的内容，详细配置请见<a href="/zh/deploy/config#other-application-configurations">部署</a>。请考虑是否有必要开启，因为这会消耗一些 tokens</p><ul><li><code>chatgpt</code>: 任意值开启</li></ul><p>要求：</p><ul><li>已设置 <code>OPENAI_API_KEY</code> 环境变量</li></ul><p>举例：</p><ul><li><code>/meituan/tech/home?chatgpt=true</code></li></ul>',66)]))}const b=a(l,[["render",i]]);export{n as __pageData,b as default};

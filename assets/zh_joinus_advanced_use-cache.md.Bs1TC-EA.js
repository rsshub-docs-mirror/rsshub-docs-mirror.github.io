import{_ as i,c as a,o as t,a2 as e}from"./chunks/framework.B9MTFJbE.js";const E=JSON.parse('{"title":"使用缓存","description":"","frontmatter":{"sidebar_position":3},"headers":[],"relativePath":"zh/joinus/advanced/use-cache.md","filePath":"zh/joinus/advanced/use-cache.md","lastUpdated":1751723006000}'),h={name:"zh/joinus/advanced/use-cache.md"};function n(l,s,k,p,d,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="使用缓存" tabindex="-1">使用缓存 <a class="header-anchor" href="#使用缓存" aria-label="Permalink to &quot;使用缓存&quot;">​</a></h1><p>RSSHub 有一个缓存模块，该缓存在短时间后过期。您可以通过环境变量来修改 <code>lib/config.js</code> 文件中的 <code>CACHE_EXPIRE</code> 值使用来更改缓存的持续时间。然而，对于那些内容更新较少的接口，最好是使用 <code>CACHE_CONTENT_EXPIRE</code> 来指定较长的缓存过期时间。</p><p>例如，为了获取每个 GitHub Issue 的第一个评论的正文，您可以向 <code>\${baseUrl}/\${user}/\${repo}/issues/\${id}</code> 发出请求，因为 <code>\${baseUrl}/\${user}/\${repo}/issues</code> 无法提供此数据。推荐将此数据存储在缓存中，以避免重复向服务器发出请求。</p><p>以下是如何使用缓存获取数据的示例代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/cache&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tryGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.link, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> got</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.link);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                item.description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.comment-body&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span></code></pre></div><p>以上代码片段来自 <a href="/zh/joinus/new-rss/start-code">制作自己的 RSSHub 路由</a>，展示了如何使用缓存获取每个问题的第一个评论的全文。使用 <code>cache.tryGet()</code> 来确定数据是否已经在缓存中。如果不在，则代码会获取数据并将其存储在缓存中。</p><p>上一个语句返回的对象将被重复使用，并且会添加一个额外的 <code>description</code> 属性。每个 <code>item.link</code> 的返回缓存将是<code>{ title, link, pubDate, author, category, description }</code>。下一次请求相同路由时，将直接返回处理过后的缓存而不是向服务器发出请求并重新计算数据。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>在 <code>tryGet()</code> 函数之外声明的变量的任何赋值都不会在缓存命中的情况下被处理。例如，以下代码将无法按预期工作：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/utils/cache&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tryGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cache:key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 缓存未命中: &#39;2&#39;, 缓存命中: &#39;1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z): </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;3&#39;</span></span></code></pre></div></div><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><p><a href="https://github.com/DIYgod/RSSHub/tree/master/lib/utils/cache" target="_blank" rel="noreferrer">lib/middleware/cache/index.ts</a></p><h3 id="cache-tryget-key-getvaluefunc-maxage-refresh" tabindex="-1">cache.tryGet(key, getValueFunc [, maxAge [, refresh ]]) <a class="header-anchor" href="#cache-tryget-key-getvaluefunc-maxage-refresh" aria-label="Permalink to &quot;cache.tryGet(key, getValueFunc \\[, maxAge \\[, refresh ]])&quot;">​</a></h3><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h4><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>key</td><td><code>string</code></td><td><em>（必填）</em> 用于存储和获取缓存的键。您可以使用 <code>:</code> 作为分隔符创建层次结构。</td></tr><tr><td>getValueFunc</td><td><code>function</code> | <code>string</code></td><td><em>（必填）</em> 当发生缓存未命中时返回要缓存的数据的函数。</td></tr><tr><td>maxAge</td><td><code>number</code></td><td><em>（可选）</em> 缓存的最大过期时间（以秒为单位）。如果没有指定，将使用 <code>CACHE_CONTENT_EXPIRE</code>。</td></tr><tr><td>refresh</td><td><code>boolean</code></td><td><em>（可选）</em> 是否在缓存命中时更新缓存过期时间。默认为 <code>true</code>。</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>以下是使用缓存的高级方法。大多数情况下，您应使用 <code>cache.tryGet()</code>。</p><p>请注意，当使用 <code>cache.get()</code> 获取缓存时，您需要使用 <code>JSON.parse()</code>。</p></div><h3 id="cache-get-key-refresh" tabindex="-1">cache.get(key [, refresh ]) <a class="header-anchor" href="#cache-get-key-refresh" aria-label="Permalink to &quot;cache.get(key \\[, refresh ])&quot;">​</a></h3><h4 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h4><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>key</td><td><code>string</code></td><td><em>（必填）</em> 用于检索缓存的键。您可以使用 <code>:</code> 作为分隔符创建层次结构。</td></tr><tr><td>refresh</td><td><code>boolean</code></td><td><em>（可选）</em> 是否在缓存命中时更新缓存过期时间。默认为<code>true</code>。</td></tr></tbody></table><h3 id="cache-set-key-value-maxage" tabindex="-1">cache.set(key, value [, maxAge ]) <a class="header-anchor" href="#cache-set-key-value-maxage" aria-label="Permalink to &quot;cache.set(key, value \\[, maxAge ])&quot;">​</a></h3><h4 id="参数-2" tabindex="-1">参数 <a class="header-anchor" href="#参数-2" aria-label="Permalink to &quot;参数&quot;">​</a></h4><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>key</td><td><code>string</code></td><td><em>（必填）</em> 用于存储缓存的键。您可以使用<code>:</code>作为分隔符创建层次结构。</td></tr><tr><td>value</td><td><code>function</code>| <code>string</code></td><td><em>（必填）</em> 要缓存的值。</td></tr><tr><td>maxAge</td><td><code>number</code></td><td><em>（可选）</em> 缓存的最大过期时间 (以秒为单位)。如果没有指定，将使用 <code>CACHE_CONTENT_EXPIRE</code>。</td></tr></tbody></table>`,20)]))}const o=i(h,[["render",n]]);export{E as __pageData,o as default};

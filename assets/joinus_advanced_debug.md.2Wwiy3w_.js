import{_ as s,c as t,o,a2 as a}from"./chunks/framework.B9MTFJbE.js";const g=JSON.parse('{"title":"Debugging","description":"","frontmatter":{"sidebar_position":5},"headers":[],"relativePath":"joinus/advanced/debug.md","filePath":"joinus/advanced/debug.md","lastUpdated":1751723006000}'),i={name:"joinus/advanced/debug.md"};function n(r,e,d,c,h,l){return o(),t("div",null,e[0]||(e[0]=[a(`<h1 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h1><p>When debugging your code, you can use more than just <code>console.log</code> or attaching the node process to a debugger. You can also use the following methods for debugging.</p><p>Note: The following methods are only effective when the instance is running with <code>debugInfo=true</code>.</p><h2 id="using-ctx-set-json-obj" tabindex="-1">Using <code>ctx.set(&#39;json&#39;, obj)</code> <a class="header-anchor" href="#using-ctx-set-json-obj" aria-label="Permalink to &quot;Using \`ctx.set(&#39;json&#39;, obj)\`&quot;">​</a></h2><p>To pass a custom object to <code>ctx.set(&#39;json&#39;, obj)</code> for debugging, follow these steps:</p><ol><li>Create your custom object.</li><li>Pass your object to <code>ctx.set(&#39;json&#39;, obj)</code>.</li><li>Access the corresponding route with query string <code>format=debug.json</code> to view your object. For example, if you want to debug the route <code>/furstar/characters/:lang?</code>, you can access the URL: <code>/furstar/characters/en?format=debug.json</code></li></ol><p>Here&#39;s an example of how to use <code>ctx.set(&#39;json&#39;, obj)</code> taken from <a href="https://github.com/DIYgod/RSSHub/blob/master/lib/routes/furstar/index.ts" target="_blank" rel="noreferrer">furstar/index.ts</a></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchAllCharacters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.data, base);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    info,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>In the example above, we&#39;re passing the <code>info</code> object to <code>ctx.set(&#39;json&#39;, obj)</code>, which we can then access using the corresponding route with query string <code>format=debug.json</code>.</p><h2 id="debug-html" tabindex="-1">debug.html <a class="header-anchor" href="#debug-html" aria-label="Permalink to &quot;debug.html&quot;">​</a></h2><p>In order to quickly test if the <code>description</code> in <code>ctx.set(&#39;data&#39;, obj)</code> is correct, you can use the query string <code>format={index}.debug.html</code> to obtain the HTML of the corresponding entry. The link can be directly opened in the browser to preview the rendering result.</p><p>Usage: Access the corresponding route with query string <code>format={index}.debug.html</code>, where <code>{index}</code> is the item number (starting from 0) in your <code>data.item</code>. And the data corresponds to the <code>data.item[index].description</code> information will be returned as route result.</p>`,12)]))}const u=s(i,[["render",n]]);export{g as __pageData,u as default};
